[{"title":"Countdown","type":0,"sectionRef":"#","url":"/Stardust/api/Countdown","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Countdown","url":"/Stardust/api/Countdown#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Countdown","url":"/Stardust/api/Countdown#new","content":"&lt;/&gt; Countdown.new( Interval: number, StartingCount: number ) → Countdown "},{"title":"Types","type":1,"pageTitle":"Countdown","url":"/Stardust/api/Countdown##","content":""},{"title":"​","type":1,"pageTitle":"Countdown","url":"/Stardust/api/Countdown#Countdown","content":"interface Countdown { Timer: Timer-- the Timer object, should be used for starting the countdown and stopping it. Count: number-- The current number the countdown is at MaxCount: number-- The maximum the count can reach Increment: number-- The amount that the count decreases every tick OnFinish: Signal-- Fires whenever the count reaches 0 Tick: Signal&lt;number&gt;-- Same as the Timer.Tick property, but with the guarantee that it will fire after the count updates, it also returns the current count as a parameter. }  Creates a new countdown object.  "},{"title":"Destroy​","type":1,"pageTitle":"Countdown","url":"/Stardust/api/Countdown#Destroy","content":"&lt;/&gt; Countdown:Destroy() → () Destroys the countdown instance. "},{"title":"Cooldown","type":0,"sectionRef":"#","url":"/Stardust/api/Cooldown","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#properties","content":" "},{"title":"Time​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#Time","content":"&lt;/&gt; Cooldown.Time: number The time property signifies how much time is needed to wait before using :Run() An example would be: local Cooldown = require(Path.Cooldown) local Debounce = Cooldown.new(5) -- The first parameter is the Time -- Can be changed with Debounce.Time = 5 Debounce:Run(function() print(&quot;This will run&quot;) -- prints end) Debounce:Run(function() print(&quot;This won't run&quot;) -- won't print because the debounce hasn't finished waiting 5 seconds end) note Calling :Run() when the debounce isn't ready won't yield.   "},{"title":"AutoReset​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#AutoReset","content":"&lt;/&gt; Cooldown.AutoReset: boolean When AutoReset is on, the debounce will reset after a successful Run() call. An example would be: local Cooldown = require(Path.Cooldown) local Debounce = Cooldown.new(5) Debounce.AutoReset = false -- Keep in mind you can also set the AutoReset by the second parameter in the constructor: Cooldown.new(5, false) Debounce:Run(function() print(&quot;This will run&quot;) -- prints end) Debounce:Run(function() print(&quot;This will still run&quot;) -- still prints because AutoReset is false and the debounce did not reset end) Debounce:Reset() -- Reset the debounce  "},{"title":"Functions​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#new","content":"&lt;/&gt; Cooldown.new( Time: number,-- The time property, for more info check the &quot;Time&quot; property. AutoReset: boolean?-- Sets the AutoReset value to the boolean provided, please refer to Cooldown.AutoReset ) → Cooldown "},{"title":"Types","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown##","content":""},{"title":"​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#Cooldown","content":"interface Cooldown { Time: number-- The time of the debounce LastActivation: number-- The last time the debounce reset AutoReset: boolean-- Whether or not the debounce should reset after running. OnReady: RBXScriptSignal -- Fires whenever the Cooldown can be be fired. OnSuccess: RBXScriptSignal -- Fires whenever a :Run() was successful. OnFail: RBXScriptSignal -- Fires whenever a :Run() fails. }  Returns a new Cooldown. "},{"title":"Errors","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown##","content":"Type\tDescription&quot;No Time&quot;\tHappens when no Time property is provided.  "},{"title":"Is​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#Is","content":"&lt;/&gt; Cooldown.Is(Object: any) → boolean Returns a boolean indicating if the given table is a Cooldown.  "},{"title":"Reset​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#Reset","content":"&lt;/&gt; Cooldown:Reset( Delay: number?-- The amount of delay to add to the Time ) → number-- The cooldown time + delay. Resets the debounce. Just like calling a sucessful :Run() with AutoReset set to true If a delay is provided, the debounce will be delayed by the provided number. A delay will only last once. An example would be: local Cooldown = require(Path.Cooldown) local Debounce: Cooldown = Cooldown.new(2) Debounce.AutoReset = false Debounce:Run(function() print(&quot;This will run&quot;) -- prints end) Debounce:Reset(1) -- We reset it and delay it by 1 Debounce.OnReady:Wait() -- We wait 3 seconds instead of 2, because we delay it by 1. -- You can think of delaying as adding time + delay which would be 2 + 1 in our case -- Delaying will not change the time. Debounce:Run(function() print(&quot;This will run&quot;) -- will print because the :Run will be ready. end)   "},{"title":"Run​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#Run","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Cooldown:Run( Callback: () → nil-- The function that will be called on a successful run. Will yield. ) → boolean-- Returns a boolean indicating if the run was successful or not. Runs the given callback function if the passed time is higher than the Time property. If AutoReset is true, it will call :Reset() after a successful run. "},{"title":"Errors","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown##","content":"Type\tDescription&quot;No Callback&quot;\tHappens when no callback is provided.  "},{"title":"RunIf​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#RunIf","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Cooldown:RunIf( Predicate: boolean | () → boolean,-- The boolean or function that returns a boolean indicating if :Run() will be called. Callback: () → nil-- The function that will be called on a successful run. Will yield. ) → boolean-- Returns a boolean indicating if the run was successful or not. If the given Predicate (The First parameter) is true or returns true, it will call :Run() on itself. An example would be: local Cooldown = require(Path.Cooldown) local Debounce = Cooldown.new(5) Debounce.AutoReset = false Debounce:RunIf(true, function() print(&quot;This will run&quot;) -- prints end) Debounce:RunIf(false, function() print(&quot;This will not run&quot;) -- does not print because the first parameter (Predicate) is false. end)  "},{"title":"Errors","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown##","content":"Type\tDescription&quot;No Predicate&quot;\tHappens when no Predicate, indicated by a boolean or boolean-returning function is provided. &quot;No Callback&quot;\tHappens when no callback is provided.  "},{"title":"RunOrElse​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#RunOrElse","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; Cooldown:RunOrElse( Callback: () → nil,-- The function that will be called on a successful run. Will yield. Callback2: () → nil-- The function that will be called on a unsuccessful run. Will yield. ) → () if the :Run() will not be successful, it will instead call callback2. This won't reset the debounce. An example would be: local Cooldown = require(Path.Cooldown) local Debounce = Cooldown.new(5) Debounce:RunOrElse(function() print(&quot;This will run&quot;) -- prints end, function() print(&quot;This will not print&quot;) -- doesn't print because the :Run() will be successful. end) Debounce:RunOrElse(function() print(&quot;This will not run&quot;) -- does not print because the debounce hasn't finished waiting. end, function() print(&quot;This will run&quot;) -- will print because the :Run() failed. end)  "},{"title":"Errors","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown##","content":"Type\tDescription&quot;No Callback&quot;\tHappens when no Callback is provided. &quot;No Callback2&quot;\tHappens when no Callback2 is provided.  "},{"title":"IsReady​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#IsReady","content":"&lt;/&gt; Cooldown:IsReady() → boolean-- Indicates if the :Run() will be successful. Returns a boolean indicating if the Cooldown is ready to :Run().  "},{"title":"GetPassed​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#GetPassed","content":"&lt;/&gt; Cooldown:GetPassed( Clamped: boolean-- If this is true, it will use math.clamp to make sure the value returned is min 0 and max the time. ) → number-- The passed time. Returns a boolean indicating the passed time since the last :Run().  "},{"title":"GetAlpha​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#GetAlpha","content":"&lt;/&gt; Cooldown:GetAlpha( Reversed: boolean-- If true, will return alpha as 0 if fully ready to :Run() instead of 1. ) → number-- The passed time indicated by an alpha. Returns the time before the :Run() is ready in a value between 0-1.  "},{"title":"Destroy​","type":1,"pageTitle":"Cooldown","url":"/Stardust/api/Cooldown#Destroy","content":"&lt;/&gt; Cooldown:Destroy() → () Destroys the Cooldown. "},{"title":"Ploder","type":0,"sectionRef":"#","url":"/Stardust/api/Ploder","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#types","content":" "},{"title":"Ploder​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#Ploder","content":"&lt;/&gt; interface Ploder { BlastPressure: number-- Ploder.BlastPressure BlastRadius: number-- Ploder.BlastRadius DestroyJointRadiusPercent: number-- Ploder.DestroyJointRadiusPercent ExplosionType: Enum.ExplosionType-- Ploder.ExplosionType Position: Vector3 -- Ploder.Position TimeScale: number-- Ploder.TimeScale Visible: boolean-- Ploder.Visible Debug: boolean-- Ploder.Debug Hit: RBXScriptSignal | Signal&lt;BasePart, number&gt;-- Ploder.Hit } This is what the constructor returns, a table that resembles the normal Explosion. Every single property here is modifiable and can be customised to your liking. "},{"title":"Properties​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#properties","content":" "},{"title":"BlastPressure​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#BlastPressure","content":"&lt;/&gt; Ploder.BlastPressure: number The BlastPressure tells the explosion the amount of force to apply on hit parts. note The BlastPressure only applies if a part isn't anchored and not welded. The BlastPressure only applies if the Ploder.DestroyJointRadiusPercent requirement is met. The BlastPressure is the same as the Explosion BlastPressure  "},{"title":"BlastRadius​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#BlastRadius","content":"&lt;/&gt; Ploder.BlastRadius: number The BlastRadius tells the explosion the amount of range it will have. note The BlastRadius is the same as the Explosion BlastRadius  "},{"title":"DestroyJointRadiusPercent​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#DestroyJointRadiusPercent","content":"&lt;/&gt; Ploder.DestroyJointRadiusPercent: number The DestroyJointRadiusPercent tells the explosion how close a part has to be to be affected by the pressure and get its joints destroyed. It should be a value between 0-1. 1 being 100% (it will always destroy no matter the range) and 0.5 being 50% (50% near the explosion or less). note The DestroyJointRadiusPercent is the same as the Explosion DestroyJointRadiusPercent  "},{"title":"ExplosionType​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#ExplosionType","content":"&lt;/&gt; Ploder.ExplosionType: Enum.ExplosionType The ExplosionType defines if the explosion will leave craters behind on terrain. note The ExplosionType is the same as the Explosion ExplosionType  "},{"title":"Position​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#Position","content":"&lt;/&gt; Ploder.Position: Vector3  The Position defines the center and origin of the explosion. note The Position is the same as the Explosion Position  "},{"title":"TimeScale​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#TimeScale","content":"&lt;/&gt; Ploder.TimeScale: number The TimeScale defines the speed of the explosion particle (if not using any custom ones). This is a value from 0-1. 1 being full speed, 0.5 being half speed and 0 being frozen. note The TimeScale is the same as the Explosion TimeScale  "},{"title":"Visible​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#Visible","content":"&lt;/&gt; Ploder.Visible: boolean The Visible boolean defines if any sort of visual effect will occur on explosion. If false, no default explosion or custom explosion will be rendered. note The Visible is the same as the Explosion Visible  "},{"title":"Debug​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#Debug","content":"&lt;/&gt; Ploder.Debug: boolean The Debug value is a boolean that indicates whether the explosion will be visualized by a red circle. This is used for debugging and checking the radius of the explosion.  "},{"title":"Hit​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#Hit","content":"&lt;/&gt; Ploder.Hit: RBXScriptSignal | Signal&lt;BasePart, number&gt; The Hit event fires whenever a part is caught within the explosion's range. It returns the Part and Distance from center to part as parameters. note The Hit is the same as the Explosion Hit "},{"title":"Functions​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#new","content":"&lt;/&gt; Ploder.new() → Ploder Constructs and returns a new explosion.  "},{"title":"newBehavior​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#newBehavior","content":"&lt;/&gt; Ploder.newBehavior() → PloderBehavior Returns a new PloderBehavior.  "},{"title":"Explode​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#Explode","content":"&lt;/&gt; Ploder:Explode( Behavior: PloderBehavior?-- The Optional behavior configuration. ) → () Fires the explosion. note The explosion will not self-destroy (unless set in the behavior).  "},{"title":"CalculateDamage​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#CalculateDamage","content":"&lt;/&gt; Ploder:CalculateDamage( Position: BasePart | Vector3 ,-- The part or position to calculate from. Damage: NumberRange -- The min and max damage. ) → number-- The calculated damage represented by a number Calculates the damage based on the distance of the position.  "},{"title":"Destroy​","type":1,"pageTitle":"Ploder","url":"/Stardust/api/Ploder#Destroy","content":"&lt;/&gt; Ploder:Destroy() → () Destroys the ploder. "},{"title":"Queue","type":0,"sectionRef":"#","url":"/Stardust/api/Queue","content":"","keywords":""},{"title":"Properties​","type":1,"pageTitle":"Queue","url":"/Stardust/api/Queue#properties","content":" "},{"title":"Emptied​","type":1,"pageTitle":"Queue","url":"/Stardust/api/Queue#Emptied","content":"&lt;/&gt; Queue.Emptied: RBXScriptSignal  Fires whenever the queue runs out of functions. QueueClass.Emptied:Connect(function() print(&quot;Queue emptied!&quot;) end)  "},{"title":"Functions​","type":1,"pageTitle":"Queue","url":"/Stardust/api/Queue#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Queue","url":"/Stardust/api/Queue#new","content":"&lt;/&gt; Queue.new() → Queue Returns a new queue.  "},{"title":"Add​","type":1,"pageTitle":"Queue","url":"/Stardust/api/Queue#Add","content":"&lt;/&gt; Queue:Add(func: () → ()) → () Adds a function to the queue.  "},{"title":"Stop​","type":1,"pageTitle":"Queue","url":"/Stardust/api/Queue#Stop","content":"&lt;/&gt; Queue:Stop() → () Clears all current functions in the queue and empties it. The emptied event won't fire in here.  "},{"title":"Destroy​","type":1,"pageTitle":"Queue","url":"/Stardust/api/Queue#Destroy","content":"&lt;/&gt; Queue:Destroy() → () Destroys the queue. "},{"title":"PloderBehavior","type":0,"sectionRef":"#","url":"/Stardust/api/PloderBehavior","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#types","content":" "},{"title":"PloderBehavior​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#PloderBehavior","content":"&lt;/&gt; interface PloderBehavior { RayCastOnly: boolean-- PloderBehavior.RayCastOnly OverlapParam: OverlapParams?-- PloderBehavior.OverlapParam RayCastParams: RaycastParams?-- PloderBehavior.RayCastParams Filter: (( Hit: BasePart , Distance: number ) → boolean)?-- PloderBehavior.Filter HumanoidOnly: boolean-- PloderBehavior.HumanoidOnly BlastPressurePercent: number?-- PloderBehavior.BlastPressurePercent AffectBlastPressureDistance: boolean-- PloderBehavior.AffectBlastPressureDistance CustomExplosion: (Folder | {ParticleEmitter })?-- PloderBehavior.CustomExplosion AutoDestroy: number?-- PloderBehavior.AutoDestroy Tags: {[string]: ( Hit: BasePart , Distance: number ) → nil}-- PloderBehavior.Tags } This is what the behavior looks like. Everything can be customised. "},{"title":"Properties​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#properties","content":" "},{"title":"RayCastOnly​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#RayCastOnly","content":"&lt;/&gt; PloderBehavior.RayCastOnly: boolean If true, will cast a ray on the hit parts. If the part is succesfully hit, the effects of the explosion will apply.  "},{"title":"OverlapParam​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#OverlapParam","content":"&lt;/&gt; PloderBehavior.OverlapParam: OverlapParams Optional OverlapParams to set for the explosion.  "},{"title":"RayCastParams​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#RayCastParams","content":"&lt;/&gt; PloderBehavior.RayCastParams: RaycastParams Optional RaycastParams to set for the RayCastOnly setting. This is not needed if PloderBehavior.RayCastOnly is set to false.  "},{"title":"Filter​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#Filter","content":"&lt;/&gt; PloderBehavior.Filter: (( Hit: BasePart , Distance: number ) → boolean) This function will be called (if it exists) and if it returns true, the hit part will be registered. If it returns false, it ill be ignored and skipped.  "},{"title":"HumanoidOnly​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#HumanoidOnly","content":"&lt;/&gt; PloderBehavior.HumanoidOnly: boolean If true, the explosion will only register HumanoidRootParts.  "},{"title":"BlastPressurePercent​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#BlastPressurePercent","content":"&lt;/&gt; PloderBehavior.BlastPressurePercent: number If this isn't nil, it will use the percentage (number of 0-1) of this value instead of Ploder.DestroyJointRadiusPercent.  "},{"title":"AffectBlastPressureDistance​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#AffectBlastPressureDistance","content":"&lt;/&gt; PloderBehavior.AffectBlastPressureDistance: boolean If true, the Ploder.BlastPressure value will decrease and be lower the more distanced a hit part is.  "},{"title":"CustomExplosion​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#CustomExplosion","content":"&lt;/&gt; PloderBehavior.CustomExplosion: Folder | {ParticleEmitter } If a Folder or an array of ParticleEmitters is set, they will be visualised when the explosion occurs. The particles inside the folder/array will need to have an attribute called &quot;Count&quot; with the value being the amount of particles to emit on explosion. The paticles will need to have an attribute callde &quot;EmitTime&quot; which will disable the particle emitter after the set attribute value.  "},{"title":"AutoDestroy​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#AutoDestroy","content":"&lt;/&gt; PloderBehavior.AutoDestroy: number If not nil, the Ploder will destroy itself after exploding and waiting for the amount of time given.  "},{"title":"Tags​","type":1,"pageTitle":"PloderBehavior","url":"/Stardust/api/PloderBehavior#Tags","content":"&lt;/&gt; PloderBehavior.Tags: {[string]: ( Hit: BasePart , Distance: number ) → nil} This is a dictionary that has a string for keys and a function as the value. Whenever ploder hits a part, it will check if it has a tag (with CollectionService) from inside this table. If it does, it will call the function associated with the tag inside the table, and will return the part and distance. "},{"title":"SignalUtil","type":0,"sectionRef":"#","url":"/Stardust/api/SignalUtil","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"SignalUtil","url":"/Stardust/api/SignalUtil#functions","content":" "},{"title":"ConnectLimited​","type":1,"pageTitle":"SignalUtil","url":"/Stardust/api/SignalUtil#ConnectLimited","content":"&lt;/&gt; SignalUtil.ConnectLimited( Signal: RBXScriptSignal , Callback: (T...) → (), Amount: number ) → RBXScriptConnection  Connects the event to the callback, automaticly disconnects after the event was fired an amount of times.  "},{"title":"ConnectUntil​","type":1,"pageTitle":"SignalUtil","url":"/Stardust/api/SignalUtil#ConnectUntil","content":"&lt;/&gt; SignalUtil.ConnectUntil( Signal: RBXScriptSignal , Callback: (T...) → (), Time: number ) → RBXScriptConnection  Connects the event to the callback, automaticly disconnects after the Time amount of seconds is passed.  "},{"title":"ConnectStrict​","type":1,"pageTitle":"SignalUtil","url":"/Stardust/api/SignalUtil#ConnectStrict","content":"&lt;/&gt; SignalUtil.ConnectStrict( Signal: RBXScriptSignal , Callback: (T...) → boolean ) → RBXScriptConnection  Connects the event to the callback, if the callback returns true, it will disconnect the event. "},{"title":"Switch","type":0,"sectionRef":"#","url":"/Stardust/api/Switch","content":"On this page Switch Switches that work like java. local Switch = require(Path.to.Switch) local default = Switch.default local Value = Random.new():NextInteger(1, 10) Switch(Value) { [1] = function() print(&quot;value is 1&quot;) end, [10] = function() print(&quot;value is 10&quot;) end, [default] = function() print(&quot;value is not 1 or 10&quot;) end } ","keywords":""},{"title":"Stater","type":0,"sectionRef":"#","url":"/Stardust/api/Stater","content":"","keywords":""},{"title":"Types​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#types","content":" "},{"title":"State​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#State","content":"&lt;/&gt; type State = (Stater | any) → boolean?  "},{"title":"Functions​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#new","content":"&lt;/&gt; Stater.new( States: {[string]: State&lt;T&gt;} | Instance ,-- The Table that will have all the States Tick: number?,-- Optional tick to be set. Return: T?-- Determines what to return in the first parameter of each state. ) → Stater&lt;T&gt; "},{"title":"Types","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater##","content":""},{"title":"​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#Stater","content":"interface Stater { States: {[string]: State}-- The Provided States Table, if theres a &quot;Init&quot; state then that function will execute each time the Stater Starts. Info: {any?}-- A table that you can add anything in, this is more recommended than directly inserting variables inside the object. Tick: number?-- The time it takes for the current state to be called again after a function is done. Default is 0 Return: any-- This is the thing that returns as the first parameter of every single state. Default is the Stater object itself. State: State-- The current state that the Stater is on. StateConfirmation: boolean-- If this is enabled, the state MUST return a boolean indicating if the function ran properly. Changed: RBXScriptSignal -- A signal that fires whenever the State changes. Returns Current State and Previous State StatusChanged: RBXScriptSignal -- Fired whenever the Stater starts or closes. Returns the current status as a boolean. StateRemoved: RBXScriptSignal -- A signal that fires whenever a state is added via the Stater:AddState() method. Returns the State Name. StateAdded: RBXScriptSignal -- A signal that fires whenever a state is removed via the Stater:RemoveState() method. Returns the State Name. }  Returns a new Stater Object. "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater##","content":"Type\tDescription&quot;No States&quot;\tHappens when no States are provided  "},{"title":"RemoveState​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#RemoveState","content":"&lt;/&gt; Stater:RemoveState( Name: string-- The name of the removing state. ) → () Removes a state inside the states table.  "},{"title":"AddState​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#AddState","content":"&lt;/&gt; Stater:AddState( Name: string,-- The name that the state will go by. State: State-- The State function itself. ) → () Adds a state inside the states table. If there is a Start after the State name inside the States, that will play. If there is a End after the State name inside the States, that will play after the state changes. "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater##","content":"Type\tDescription&quot;Existing State&quot;\tHappens when the name of the state is already inside the table.  "},{"title":"GetCurrentState​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#GetCurrentState","content":"&lt;/&gt; Stater:GetCurrentState() → string? Returns the current state the Stater is on indicated by a string. If none then nil. This is currently the same as self.State.  "},{"title":"IsWorking​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#IsWorking","content":"&lt;/&gt; Stater:IsWorking() → boolean Returns a boolean indicating if the State currently is on.  "},{"title":"SetState​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#SetState","content":"&lt;/&gt; Stater:SetState( State: string-- The function name inside States represented by a string ) → () Returns a boolean indicating if the State currently is on. "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater##","content":"Type\tDescription&quot;No State&quot;\tHappens when no State is provided. &quot;Invalid State&quot;\tHappens when the state provided doesn't exist.  "},{"title":"Start​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#Start","content":"&lt;/&gt; Stater:Start( StartingState: string-- The function name inside States represented by a string, this state will be set at the start. ) → () Begins the Stater "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater##","content":"Type\tDescription&quot;No State&quot;\tHappens when no State is provided. &quot;Already Started&quot;\tHappens when the Stater has already started.  "},{"title":"Stop​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#Stop","content":"&lt;/&gt; Stater:Stop() → () Stops the stater and its state. "},{"title":"Errors","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater##","content":"Type\tDescription&quot;Already Stopped&quot;\tHappens when the Stater has already been stopped.  "},{"title":"Destroy​","type":1,"pageTitle":"Stater","url":"/Stardust/api/Stater#Destroy","content":"&lt;/&gt; Stater:Destroy() → () Gets rid of the Stater Object. "}]