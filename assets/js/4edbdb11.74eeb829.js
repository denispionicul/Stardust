"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[959],{89866:e=>{e.exports=JSON.parse('{"functions":[],"properties":[],"types":[{"name":"Countdown","desc":"","fields":[{"name":"Timer","lua_type":"Timer","desc":"the [Timer](https://sleitnick.github.io/RbxUtil/api/Timer) object, should be used for starting the countdown and stopping it."},{"name":"Count","lua_type":"number","desc":"The current number the countdown is at"},{"name":"MaxCount","lua_type":"number","desc":"The maximum the count can reach"},{"name":"Increment","lua_type":"number","desc":"The amount that the count decreases every tick"},{"name":"OnFinish","lua_type":"Signal","desc":"Fires whenever the count reaches 0"},{"name":"Tick","lua_type":"Signal<number>","desc":"Same as the [Timer.Tick](https://sleitnick.github.io/RbxUtil/api/Timer/#Tick) property, but with the guarantee that it will fire after the count updates, it also returns the current count as a parameter."}],"source":{"line":38,"path":"src/Countdown/init.lua"}}],"name":"Countdown","desc":"Countdown is a useful class for managing, well, countdown. It is a modified version or [Rbxutil\'s Timer](https://sleitnick.github.io/RbxUtil/api/Timer).","source":{"line":44,"path":"src/Countdown/init.lua"}}')}}]);